name: Main Foodgram workflow

on:
  push:
    branches:
      - main

# jobs - это порядок выполнения worflow (алгоритм автоматической работы с репозиторием)
jobs:
  # ЗАДАНИЕ с локальными тестами
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          # данные из файла .env
          POSTGRES_USER: foodgram_user
          POSTGRES_PASSWORD: foodgram_password
          POSTGRES_DB: foodgram
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    # шаги локальных тестов
    steps:
    - uses: actions/checkout@v3
    
    # Шаг: проверки версии python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    # Шаг: установка/обновление необходимых пакетов pip
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt 
    
    # Шаг: тесты на flake8
    - name: Test with flake8
      env:
        POSTGRES_USER: foodgram_user
        POSTGRES_PASSWORD: foodgram_password
        POSTGRES_DB: foodgram
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        python -m flake8 backend/
  
  # ЗАДАНИЕ с docker образами
  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      # Шаг: проверка наличия репозитория
      - name: Check out the repo
        uses: actions/checkout@v3
      
      # Шаг: создание образа бэкенда
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Шаг: авторизация на DockerHub
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # Шаг: отправка образа бэкенда на DockerHub
      - name: Push to DockerHub backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest 
      
      # Шаг: отправка образа фронтенда на DockerHub
      - name: Push to Docker Hub frontend
        uses: docker/build-push-action@v3
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
  
  # ЗАДАНИЕ: деплой
  deploy:
    runs-on: ubuntu-latest
    needs: 
      - build_and_push_to_docker_hub
    steps:
      # Шаг: проверка наличия репзитория
      - name: Checkout repo
        uses: actions/checkout@v3
      
      # Шаг: порядок выполнения ssh команд (шифрованное подключение) во время деплоя
      # ssh команда - это любые команды, например git push
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        # Подключение секретов из actions для репозитория  
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          # Команды на удаленном сервере
          # pull - это обновление данных из DockerHub
          # down - это остановить и удалить контейнеры
          # up -d - это запустить контейнеры ("-d" значит в фоновом режиме/в режиме демона)
          # exec backend python manage.py migrate - запуск миграций на командной строке внутри запущенного контейнера
          # exec backend python manage.py collectstatic --no-input - собираем статику бэкенда
          # exec backend cp -r /app/collected_static/. /static/ - копируем статику бэкенда в том(volume) /static/
          # system prune -af - удаляем неиспользуемые образы
          script: |
            cd foodgram/infra
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input
            sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /static/
            sudo docker system prune -af
  
  # ЗАДАНИЕ: отправка уведомления в Telegram
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: Деплой foodgram успешно выполнен!
